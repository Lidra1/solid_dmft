{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "01d29608",
   "metadata": {},
   "source": [
    "# Plotting the spectral function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e6552d7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from IPython.display import display\n",
    "from IPython.display import Image\n",
    "import numpy as np\n",
    "import importlib, sys\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import cm\n",
    "from timeit import default_timer as timer\n",
    "\n",
    "from ase.io.espresso import read_espresso_in\n",
    "\n",
    "from h5 import HDFArchive\n",
    "from solid_dmft.postprocessing import plot_correlated_bands as pcb"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85052821",
   "metadata": {},
   "source": [
    "## Optional: ASE Brillouin Zone"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "497ad301",
   "metadata": {},
   "source": [
    "Before we start, it might be helpful to have a brief look at the Brillouin Zone by loading an input file of your favorite DFT code (Quantum Espresso in this case). ASE will write out the special $k$-points, which we use later. Alternatively, you can of course define the dictionary `kpts_dict` yourself. Careful, it might not define $Z$, which is needed and added below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c961d6e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "G [0. 0. 0.]\n",
      "M [0.5 0.5 0. ]\n",
      "R [0.5 0.5 0.5]\n",
      "X [0.  0.5 0. ]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes3DSubplot:>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "scf_in = './correlated_bandstructure/svo.scf.in'\n",
    "\n",
    "# read scf file\n",
    "atoms = read_espresso_in(scf_in)\n",
    "# set up cell and path\n",
    "lat = atoms.cell.get_bravais_lattice()\n",
    "path = atoms.cell.bandpath('', npoints=100)\n",
    "kpts_dict = path.todict()['special_points']\n",
    "\n",
    "for key, value in kpts_dict.items():\n",
    "    print(key, value)\n",
    "lat.plot_bz()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3cd1fda1",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d349c209",
   "metadata": {},
   "source": [
    "## Configuration"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5aa199b",
   "metadata": {},
   "source": [
    "The script makes use of the `triqs.lattice.utils` class, which allows to set up a tight-binding model based on a Wannier90 Hamiltonian. Additionally, you may upload a self-energy in the usual `solid_dmft` format to compute correlated spectral properties.\n",
    "Currently, the following options are implemented:\n",
    "<ol>\n",
    "<li>bandstructure</li>\n",
    "<li>Fermi slice</li>\n",
    "</ol>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "990c9a89",
   "metadata": {},
   "source": [
    "### Basic options"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c8e949f",
   "metadata": {},
   "source": [
    "We start with configuring these options. For this example we try a tight-binding bandstructure including the correlated bands (`kslice = False`, `'tb': True`, `'alatt': True`), but feel free to come back here to explore. Alternatively to an intensity plot of the correlated bands (`qp_bands`), you can compute the correlated quasiparticle bands assuming a Fermi liquid regime.\\\n",
    "The options for $\\Sigma(\\omega)$ are `calc` or `model`, which performs a Fermi liquid linearization in the low-frequency regime. The latter will be reworked, so better stick with `calc` for now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5fa5c463",
   "metadata": {},
   "outputs": [],
   "source": [
    "kslice = False\n",
    "\n",
    "bands_config = {'tb': True, 'alatt': True, 'qp_bands': False, 'sigma': 'calc'}\n",
    "kslice_config = {'tb': True, 'alatt': True, 'qp_bands': False, 'sigma': 'calc'}\n",
    "config = kslice_config if kslice else bands_config"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a27ab426",
   "metadata": {},
   "source": [
    "### Wannier90"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2320d409",
   "metadata": {},
   "source": [
    "Next we will set up the Wannier90 Input. Provide the path, seedname, chemical potential and orbital order used in Wannier90. You may add a spin-component, and any other local Hamiltonian. For `t2g` models the orbital order can be changed (to `orbital_order_to`) and a local spin-orbit coupling term can be added (`add_lambda`). The spectral properties can be viewed projected on a specific orbital."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "26c0b159",
   "metadata": {},
   "outputs": [],
   "source": [
    "w90_path = './correlated_bandstructure/'\n",
    "w90_dict = {'w90_seed': 'svo', 'w90_path': w90_path, 'mu': 12.3958, 'n_orb': 3,\n",
    "            'orbital_order_w90': ['dxz', 'dyz', 'dxy'], 'add_spin': True, 'add_lambda': [0.1] * 3}\n",
    "\n",
    "orbital_order_to = ['dxy', 'dxz', 'dyz']\n",
    "proj_on_orb = None # or 'dxy' etc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebaf3906",
   "metadata": {},
   "source": [
    "### BZ configuration"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3da5e02",
   "metadata": {},
   "source": [
    "Depending on whether you select `kslice=True` or `False`, a corresponding `tb_config` needs to be provided containing information about the $k$-points, resolution (`n_k`) or `kz`-plane in the case of the Fermi slice. Here we just import the $k$-point dictionary provided by ASE above and add the $Z$-point. If you are unhappy with the resolution of the final plot, come back here and crank up `n_k`. For the kslice, the first letter corresponds to the upper left corner of the plotted Brillouin zone, followed by the lower left corner and the lower right one ($Y$, $\\Gamma$, and $X$ in this case)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a9a09239",
   "metadata": {},
   "outputs": [],
   "source": [
    "# band specs\n",
    "tb_bands = {'bands_path': [('R', 'G'), ('G', 'X'), ('X', 'M'), ('M', 'G')], 'Z': np.array([0,0,0.5]), 'n_k': 50}\n",
    "tb_bands.update(kpts_dict)\n",
    "\n",
    "# kslice specs\n",
    "tb_kslice = {key: tb_bands[key] for key in list(tb_bands.keys()) if key.isupper()}\n",
    "kslice_update = {'bands_path': [('Y', 'G'),('G', 'X')], 'Y': np.array([0.5,0.0,0]), 'n_k': 50, 'kz': 0.0}\n",
    "tb_kslice.update(kslice_update)\n",
    "\n",
    "tb_config = tb_kslice if kslice else tb_bands"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "472b27f9",
   "metadata": {},
   "source": [
    "### Self-energy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c41875c",
   "metadata": {},
   "source": [
    "Here we provide the info needed from the h5Archive, like the self-energy, iteration count, spin and block component and the frequency mesh used for the interpolation. The values for the mesh of course depend on the quantity of interest. For a kslice the resolution around $\\omega=0$ is crucial and we need only a small energy window, while for a bandstructure we are also interested in high energy features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8902daea",
   "metadata": {},
   "outputs": [],
   "source": [
    "freq_mesh_kslice = {'window': [-0.5, 0.5], 'n_w': int(1e6)}\n",
    "freq_mesh_bands = {'window': [-5, 5], 'n_w': int(1e3)}\n",
    "freq_mesh = freq_mesh_kslice if kslice else freq_mesh_bands\n",
    "\n",
    "dmft_path = './correlated_bandstructure/svo_example.h5'\n",
    "\n",
    "sigma_dict = {'dmft_path': dmft_path, 'it': 'last_iter', 'orbital_order_dmft': orbital_order_to, 'spin': 'up',\n",
    "              'block': 0, 'eta': 0.0, 'w_mesh': freq_mesh, 'linearize': False}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "780bef12",
   "metadata": {},
   "source": [
    "__Optional__: for completeness and as a sanity check we quickly take a look at the self-energy. Make sure you provide a physical one!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4fcff7a7",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "not all arguments converted during string formatting",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_1688069/3319349834.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0morb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0msp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'up_0'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mfreq_mesh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mw\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msigma_freq\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msp\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0morb\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0morb\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmesh\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfreq_mesh\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msigma_freq\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msp\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0morb\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0morb\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreal\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/work/codes/ccq-software-build/triqs/3_unst_nixpack_llvm/installation/lib/python3.9/site-packages/h5/archive.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    203\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32min\u001b[0m \u001b[0ml\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_raw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    204\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 205\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitem1__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reconstruct_python_objects\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    206\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m     \u001b[0;31m#-------------------------------------------------------------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/work/codes/ccq-software-build/triqs/3_unst_nixpack_llvm/installation/lib/python3.9/site-packages/h5/archive.py\u001b[0m in \u001b[0;36m__getitem1__\u001b[0;34m(self, key, reconstruct_python_object, hdf5_format)\u001b[0m\n\u001b[1;32m    209\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 211\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Key %s does not exist.\"\u001b[0m\u001b[0;34m%\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: not all arguments converted during string formatting"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2000x400 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "with HDFArchive(dmft_path, 'r') as h5:\n",
    "    sigma_freq = h5['DMFT_results']['last_iter']['Sigma_freq_0']\n",
    "\n",
    "fig, ax = plt.subplots(1, 2, figsize=(10,2), squeeze=False, dpi=200)\n",
    "\n",
    "orb = 0\n",
    "sp = 'up_0'\n",
    "freq_mesh = np.array([w.value for w in sigma_freq[sp][orb,orb].mesh])\n",
    "\n",
    "ax[0,0].plot(freq_mesh, sigma_freq[sp][orb,orb].data.real)\n",
    "ax[0,1].plot(freq_mesh, -sigma_freq[sp][orb,orb].data.imag)\n",
    "\n",
    "ax[0,0].set_ylabel(r'Re$\\Sigma(\\omega)$')\n",
    "ax[0,1].set_ylabel(r'Im$\\Sigma(\\omega)$')\n",
    "for ct in range(2):\n",
    "    ax[0,ct].grid()\n",
    "    ax[0,ct].set_xlim(-2, 2)\n",
    "    ax[0,ct].set_xlabel(r'$\\omega$ (eV)')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20d50330",
   "metadata": {},
   "source": [
    "### Plotting options"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "226dc67e",
   "metadata": {},
   "source": [
    "Finally, you can choose colormaps for each of the functionalities from any of the available on <a href=\"https://matplotlib.org/stable/tutorials/colors/colormaps.html\">matplotlib colormaps</a>. `vmin` determines the scaling of the logarithmically scaled colorplots. The corresponding tight-binding bands will have the maximum value of the colormap. By the way, colormaps can be reversed by appending `_r` to the identifier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3b38a68",
   "metadata": {},
   "outputs": [],
   "source": [
    "proj_on_orb = orbital_order_to.index(proj_on_orb) if proj_on_orb else None\n",
    "plot_config = {'colorscheme_bands': 'coolwarm', 'colorscheme_kslice': 'PuBuGn', 'colorscheme_qpbands': 'Greens', 'vmin': 0.1, 'proj_on_orb': proj_on_orb}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afda9d5c",
   "metadata": {},
   "source": [
    "## Run"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d4cb906",
   "metadata": {},
   "source": [
    "Now that everything is set up we may hit run. Caution, if you use a lot of $k$-points, this may take a while! In the current example, it should be done within a second."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e6bee47",
   "metadata": {},
   "outputs": [],
   "source": [
    "start_time = timer()\n",
    "\n",
    "tb_data, alatt_k_w, freq_dict, dft_mu = pcb.get_dmft_bands(fermi_slice=kslice, with_sigma=bands_config['sigma'],\n",
    "                                                           orbital_order_to=orbital_order_to, qp_bands=config['qp_bands'], **w90_dict, **tb_config, **sigma_dict)\n",
    "\n",
    "print('Run took {0:.3f} s'.format(timer() - start_time))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cebd56e4",
   "metadata": {},
   "source": [
    "That's it. Now you can look at the output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dab3c319",
   "metadata": {},
   "outputs": [],
   "source": [
    "if kslice:\n",
    "    fig, ax = plt.subplots(1, figsize=(3,3), dpi=200)\n",
    "\n",
    "    pcb.plot_kslice(fig, ax, alatt_k_w, tb_data, freq_dict, w90_dict['n_orb'], tb_config, tb=config['tb'], alatt=config['alatt'], quarter=0, **plot_config)\n",
    "\n",
    "else:\n",
    "    fig, ax = plt.subplots(1, figsize=(6,3), dpi=200)\n",
    "\n",
    "    pcb.plot_bands(fig, ax, alatt_k_w, tb_data, freq_dict, w90_dict['n_orb'], dft_mu=0., tb=config['tb'], alatt=config['alatt'], qp_bands=config['qp_bands'], **plot_config)\n",
    "\n",
    "    ax.set_ylim(-1.25,1.75)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "feeb8878",
   "metadata": {},
   "source": [
    "---"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
